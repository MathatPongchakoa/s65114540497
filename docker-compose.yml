services:
  db:
    image: postgres:15-alpine
    restart: always
    env_file:
      - .env
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - default
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -h 127.0.0.1"]
      interval: 3s
      timeout: 3s
      retries: 20

  web:
    build: .
    restart: always
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - .:/app
    networks:
      - default
      - traefik-public
    labels:
      # --- การตั้งค่าหลักสำหรับ Traefik ---
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-public"

      # --- 1. ตั้งค่า Router: กำหนดเงื่อนไขการรับ request ---
      - "traefik.http.routers.mathat497-web-router.rule=PathPrefix(`/mathat497`)"
      - "traefik.http.routers.mathat497-web-router.entrypoints=web"
      # ระบุให้ Router นี้ใช้ Middleware ที่เราจะสร้างในข้อ 2
      - "traefik.http.routers.mathat497-web-router.middlewares=mathat497-stripprefix-middleware@docker"

      # --- 2. ตั้งค่า Middleware: แปลง request ก่อนส่งต่อ ---
      # สร้าง Middleware เพื่อ "ตัด" /wuttinan596 ออกจาก URL
      - "traefik.http.middlewares.mathat497-stripprefix-middleware.stripprefix.prefixes=/mathat497"

      # --- 3. ตั้งค่า Service: กำหนดปลายทางของ request ---
      # ระบุให้ Traefik ส่ง request ไปยัง port 8000 ของ container นี้
      - "traefik.http.services.mathat497-web-service.loadbalancer.server.port=8000"

volumes:
  pgdata:

networks:
  default:
    driver: bridge
  traefik-public:
    external: true