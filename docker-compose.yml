services:
  db:
    image: postgres:15-alpine
    restart: always
    env_file:
      - .env
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -h 127.0.0.1"]
      interval: 3s
      timeout: 3s
      retries: 20

  web:
    build: . # <--- ชี้ไปที่โฟลเดอร์ปัจจุบันที่ไฟล์ docker-compose.yml อยู่ (ซึ่งต้องมี Dockerfile และ requirements.txt)
    restart: always
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "10497:8000" # <--- map port ไปยังเครื่อง host เพื่อให้ Nginx เข้าถึงได้
    volumes:
      - .:/app
      - ./static:/app/static
      - ./media:/app/media

  nginx:
    image: nginx:1.25.3-alpine
    restart: always
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro # <--- path สัมพัทธ์ไปยังไฟล์ nginx.conf
    ports:
      - "80:80" # <--- map port ของ Nginx ไปยัง host
    depends_on:
      - web

volumes:
  pgdata: